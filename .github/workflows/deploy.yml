name: Deploy Application

on:
  workflow_run:
    workflows: ["Build Project"]
    types:
      - completed

permissions:
  contents: read
  actions: write

jobs:

  versionamento:
    runs-on: ubuntu-latest
    outputs:
      versao: ${{ steps.get-version.outputs.versao }}
      docker-container-registry: ${{ steps.docker-image-registry.outputs.docker-container-registry }}

    steps:
      - uses: actions/download-artifact@v4
        with:
          name: versao
          path: ./
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.workflow_run.id }}

      - name: Get version from file
        id: get-version
        run: |
          VALUE=$(cat ./versao.txt)
          echo "::notice:: $VALUE"
          echo "versao=$VALUE" >> "$GITHUB_OUTPUT"

      - name: Generate docker image registry
        id: docker-image-registry
        run: |
          echo "docker-container-registry=${{ vars.DOCKER_CONTAINER_REGISTRY }}/${{ vars.DOCKERHUB_REPOSITORY }}:${{ steps.get-version.outputs.versao }}" >> "$GITHUB_OUTPUT"

  deploy-to-google-cloud:
    name: Deploy to Google Cloud
    needs: versionamento
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    strategy:
      matrix:
        environment: [staging, production]
    environment: ${{ matrix.environment }}

    steps:
      - uses: google-github-actions/auth@v2
        with:
          credentials_json: "${{ secrets.GCP_CREDENTIALS }}"
          project_id: ${{ vars.GCP_PROJECT_ID }}

      - uses: google-github-actions/deploy-cloudrun@v2
        id: deploy-to-cloud-run
        with:
          project_id: ${{ vars.GCP_PROJECT_ID }}
          service: ${{ vars.GCP_RUN_SERVICE }}
          image: ${{ needs.versionamento.outputs.docker-container-registry }}
          region: ${{ vars.GCP_RUN_REGION }}

      - name: 'Test the deployment'
        run: |-
          echo "::notice:: ${{ steps.deploy-to-cloud-run.outputs.url }}/index.html"
          curl -I --fail "${{ steps.deploy-to-cloud-run.outputs.url }}/index.html"

  deploy-to-microsoft-azure:
    name: Deploy to Microsoft Azure
    needs: versionamento
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    strategy:
      matrix:
        environment: [staging, production]
    environment: ${{ matrix.environment }}

    steps:

      - name: Deploy to Azure WebApp
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ vars.AZURE_WEBAPP_NAME }}
          resource-group-name: ${{ vars.AZURE_RESOURCE_GROUP }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          images: ${{ needs.versionamento.outputs.docker-container-registry }}

      - name: 'Test the deployment'
        run: |-
          echo "::notice:: ${{ steps.deploy-to-webapp.outputs.webapp-url }}/index.html"
          curl -I --fail "${{ steps.deploy-to-webapp.outputs.webapp-url }}/index.html"

  deploy-to-amazon-aws:
    name: Deploy to Amazon AWS
    needs: versionamento
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    strategy:
      matrix:
        environment: [staging, production]
    environment: ${{ matrix.environment }}
    env:
      TASK_DEFINITION_PATH: ./infra/aws/amazon-ecs-task-definition.json

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Update the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.TASK_DEFINITION_PATH }}
          container-name: ${{ vars.AWS_ECS_CONTAINER_NAME }}
          image: ${{ needs.versionamento.outputs.docker-container-registry }}
          environment-variables: |
            SQL_CONNECTION_STRING_KEY=ConnectionStrings:TodoDb
            ConnectionStrings:TodoDb=${{ secrets.AWS_CONNSTR }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          cluster: ${{ vars.AWS_ECS_CLUSTER }}
          service: ${{ vars.AWS_ECS_SERVICE }}

      - name: 'Test the deployment'
        run: |-
          echo "::notice:: ${{ vars.AWS_ECS_LOAD_BALANCER_ENDPOINT }}/index.html"
          curl -I --fail "${{ vars.AWS_ECS_LOAD_BALANCER_ENDPOINT }}/index.html"