name: Build Project

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  versionamento:
    runs-on: ubuntu-latest
    name: Versionamento
    permissions:
      contents: write

    outputs:
      version: ${{ steps.version.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0

      - uses: codacy/git-version@2.8.0
        id: version
        with:
          release-branch: main
          prefix: v

      - name: Tag do repositorio
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "::notice:: ${{ steps.version.outputs.version }}"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"
          git config --global user.name "${{ github.actor }}"
          git tag -a ${{ steps.version.outputs.version }} -m "Release ${{ steps.version.outputs.version }}"
          git push --tags
        if: github.ref == 'refs/heads/main'

      - name: Create file version
        run: |
          echo ${{ steps.version.outputs.version }} > versao.txt
        if: github.ref == 'refs/heads/main'

      - uses: actions/upload-artifact@v4
        with:
          name: versao
          path: versao.txt
        if: github.ref == 'refs/heads/main'

  backend-build-and-test:
    needs: versionamento
    runs-on: ubuntu-latest
    name: Backend Build and Test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.x"
          cache: true
          cache-dependency-path: ./src/**/packages.lock.json

      - name: Restore
        run: |
          dotnet restore ./src/Todo.Api.sln

      - name: Build
        run: |
          dotnet build --no-restore --configuration Release ./src/Todo.Api.sln

      - name: Test
        run: |
          dotnet test --no-build --no-restore ./src/Todo.Api.sln --configuration Release --logger trx --results-directory "TestResults"
        if: github.ref != 'refs/heads/main'

      - uses: actions/upload-artifact@v4
        with:
          name: dotnet-test-results
          path: TestResults
        if: github.ref != 'refs/heads/main'

      - name: Publish
        run: dotnet publish ./src/api/Todo.Api.csproj --no-restore --no-build --configuration Release --output ./publish

      - name: Tag published version
        uses: restackio/update-json-file-action@2.1
        with:
          file: ./publish/appsettings.json
          fields: "{\"MY_APP_VERSION\": \"${{ needs.versionamento.outputs.version }}\"}"

      - name: Upload dotnet artifacts
        uses: actions/upload-artifact@v4
        with:
          name: api
          path: ./publish

  backend-lint:
    needs: versionamento
    runs-on: ubuntu-latest
    name: Backend Lint

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # super-linter needs the full git history to get the
          # list of files that changed across commits
          fetch-depth: 0

      - uses: github/super-linter@v6
        env:
          DEFAULT_BRANCH: "main"
          VALIDATE_ALL_CODEBASE: "false"
          VALIDATE_YAML: "true"
          VALIDATE_CSHARP: "true"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    if: github.ref != 'refs/heads/main'

  frontend-build-and-test:
    needs: versionamento
    runs-on: ubuntu-latest
    name: Frontend Build and Test
    defaults:
      run:
        working-directory: ./src/web

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: npm
          cache-dependency-path: ./src/web

      - name: Install dependencies
        run: |
          npm ci

      - name: Test
        run: |
          npm run lint
        if: github.ref != 'refs/heads/main'

      - name: Build
        run: |
          npm run build

      - uses: actions/upload-artifact@v4
        with:
          name: web
          path: ./src/web/dist

  frontend-lint:
    needs: versionamento
    runs-on: ubuntu-latest
    name: Frontend Lint
    defaults:
      run:
        working-directory: ./src/web

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: npm
          cache-dependency-path: ./src/web

      - name: Install dependencies
        run: |
          npm ci

      - name: Lint
        run: |
          npm run lint
    if: github.ref != 'refs/heads/main'

  dependency-check:
    name: Dependency Check
    needs: versionamento
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - uses: actions/checkout@v4

      - uses: actions/dependency-review-action@v4
        with:
          comment-summary-in-pr: always
    if: github.ref != 'refs/heads/main'

  code-security-check:
    name: Code Security Check
    needs: versionamento
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      packages: read
      actions: read
      contents: read

    strategy:
      matrix:
        include:
          - name: Backend
            language: csharp
            build-mode: autobuild
          - name: Frontend
            language: javascript
            build-mode: none

    steps:
      - uses: actions/checkout@v4

      - uses: github/codeql-action/init@v3
        name: Initialize CodeQL - ${{ matrix.name }}
        with:
          languages: ${{ matrix.language }}
          build-mode: ${{ matrix.build-mode }}

      - uses: github/codeql-action/analyze@v3
        name: Analyze code - ${{ matrix.name }}
        with:
          category: "/language:${{ matrix.language }}"
    if: github.ref != 'refs/heads/main'

  build-docker-image:
    name: Packing and Publish
    needs: [versionamento, backend-build-and-test, frontend-build-and-test]
    runs-on: ubuntu-latest

    env:
      version: ${{ needs.versionamento.outputs.version }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          path: app
          merge-multiple: false

      - name: Build Docker image
        run: |
          docker build -t ${{ vars.DOCKERHUB_REPOSITORY }}:${{ env.version }} .

      - name: Tag Docker image as Latest
        run: |
          docker tag ${{ vars.DOCKERHUB_REPOSITORY }}:${{ env.version }} ${{ vars.DOCKERHUB_REPOSITORY }}:latest
        if: github.ref == 'refs/heads/main'

      - name: Docker Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker Push
        run: |
          docker push --all-tags ${{ vars.DOCKERHUB_REPOSITORY }}
